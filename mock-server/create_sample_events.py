#!/usr/bin/env python3
"""
Script to create sample events for demo purposes
Creates diverse events with different types, dates, and image scenarios
"""

import sqlite3
import json
from datetime import datetime, timedelta
import os
import random

DATABASE_PATH = 'events.db'

# Sample event types (matching the app's color scheme)
EVENT_TYPES = [
    {"id": 1, "name": "Meeting", "description": "H·ªçp nh√≥m, h·ªçp d·ª± √°n"},
    {"id": 2, "name": "Work", "description": "C√¥ng vi·ªác, deadline"},
    {"id": 3, "name": "Personal", "description": "S·ª± ki·ªán c√° nh√¢n"},
    {"id": 4, "name": "Party", "description": "Ti·ªác t√πng, sinh nh·∫≠t"},
    {"id": 5, "name": "Conference", "description": "H·ªôi th·∫£o, workshop"}
]

# Sample events data
SAMPLE_EVENTS = [
    {
        "title": "H·ªçp d·ª± √°n Mobile App",
        "description": "Th·∫£o lu·∫≠n v·ªÅ ti·∫øn ƒë·ªô ph√°t tri·ªÉn ·ª©ng d·ª•ng di ƒë·ªông, review code v√† l·∫≠p k·∫ø ho·∫°ch cho sprint ti·∫øp theo. C·∫ßn chu·∫©n b·ªã demo cho kh√°ch h√†ng.",
        "type_id": 1,  # Meeting
        "start_date": (datetime.now() + timedelta(days=1, hours=9)).isoformat(),
        "location": "Ph√≤ng h·ªçp A, T·∫ßng 3, T√≤a nh√† TechCorp",
        "has_images": True,
        "image_count": 2
    },
    {
        "title": "Deadline b√°o c√°o qu√Ω 4",
        "description": "Ho√†n th√†nh b√°o c√°o t√†i ch√≠nh qu√Ω 4, t·ªïng h·ª£p d·ªØ li·ªáu t·ª´ c√°c ph√≤ng ban v√† chu·∫©n b·ªã presentation cho ban l√£nh ƒë·∫°o.",
        "type_id": 2,  # Work
        "start_date": (datetime.now() + timedelta(days=2, hours=14)).isoformat(),
        "location": "VƒÉn ph√≤ng ch√≠nh, T·∫ßng 5",
        "has_images": False,
        "image_count": 0
    },
    {
        "title": "Sinh nh·∫≠t m·∫π",
        "description": "T·ªï ch·ª©c ti·ªác sinh nh·∫≠t cho m·∫π t·∫°i nh√†, m·ªùi gia ƒë√¨nh v√† b·∫°n b√® th√¢n thi·∫øt. Chu·∫©n b·ªã b√°nh kem v√† qu√† t·∫∑ng.",
        "type_id": 4,  # Party
        "start_date": (datetime.now() + timedelta(days=3, hours=18)).isoformat(),
        "location": "Nh√† ri√™ng, 123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1",
        "has_images": True,
        "image_count": 3
    },
    {
        "title": "Workshop React Native",
        "description": "Tham gia workshop v·ªÅ React Native do c√¥ng ty t·ªï ch·ª©c. H·ªçc v·ªÅ state management, navigation v√† performance optimization.",
        "type_id": 5,  # Conference
        "start_date": (datetime.now() + timedelta(days=5, hours=10)).isoformat(),
        "location": "H·ªôi tr∆∞·ªùng l·ªõn, T·∫ßng 1, T√≤a nh√† TechCorp",
        "has_images": True,
        "image_count": 1
    },
    {
        "title": "Kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥",
        "description": "Kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ h√†ng nƒÉm t·∫°i b·ªánh vi·ªán. Ki·ªÉm tra t·ªïng qu√°t, x√©t nghi·ªám m√°u v√† t∆∞ v·∫•n dinh d∆∞·ª°ng.",
        "type_id": 3,  # Personal
        "start_date": (datetime.now() + timedelta(days=7, hours=8)).isoformat(),
        "location": "B·ªánh vi·ªán ƒêa khoa Trung ∆∞∆°ng, Ph√≤ng 301",
        "has_images": False,
        "image_count": 0
    },
    {
        "title": "H·ªçp review code sprint 15",
        "description": "Review code cho sprint 15, ki·ªÉm tra ch·∫•t l∆∞·ª£ng, performance v√† security. Th·∫£o lu·∫≠n v·ªÅ best practices v√† refactoring.",
        "type_id": 1,  # Meeting
        "start_date": (datetime.now() + timedelta(days=1, hours=15)).isoformat(),
        "location": "Ph√≤ng h·ªçp B, T·∫ßng 4",
        "has_images": True,
        "image_count": 4
    },
    {
        "title": "Ti·ªác cu·ªëi nƒÉm c√¥ng ty",
        "description": "Ti·ªác cu·ªëi nƒÉm v·ªõi to√†n b·ªô nh√¢n vi√™n c√¥ng ty. T·ªïng k·∫øt nƒÉm c≈©, k·∫ø ho·∫°ch nƒÉm m·ªõi v√† trao th∆∞·ªüng cho nh√¢n vi√™n xu·∫•t s·∫Øc.",
        "type_id": 4,  # Party
        "start_date": (datetime.now() + timedelta(days=10, hours=19)).isoformat(),
        "location": "Kh√°ch s·∫°n 5 sao, 456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 3",
        "has_images": True,
        "image_count": 5
    },
    {
        "title": "Giao l∆∞u v·ªõi kh√°ch h√†ng",
        "description": "G·∫∑p g·ª° kh√°ch h√†ng m·ªõi ƒë·ªÉ th·∫£o lu·∫≠n v·ªÅ d·ª± √°n h·ª£p t√°c. Gi·ªõi thi·ªáu s·∫£n ph·∫©m v√† d·ªãch v·ª• c·ªßa c√¥ng ty.",
        "type_id": 2,  # Work
        "start_date": (datetime.now() + timedelta(days=4, hours=11)).isoformat(),
        "location": "Caf√© Highlands, 789 ƒê∆∞·ªùng DEF, Qu·∫≠n 2",
        "has_images": False,
        "image_count": 0
    },
    {
        "title": "Ch·∫°y b·ªô bu·ªïi s√°ng",
        "description": "Ch·∫°y b·ªô bu·ªïi s√°ng t·∫°i c√¥ng vi√™n, t·∫≠p luy·ªán s·ª©c kh·ªèe v√† th∆∞ gi√£n ƒë·∫ßu √≥c. Kho·∫£ng c√°ch 5km.",
        "type_id": 3,  # Personal
        "start_date": (datetime.now() + timedelta(days=1, hours=6)).isoformat(),
        "location": "C√¥ng vi√™n Tao ƒê√†n, Qu·∫≠n 1",
        "has_images": True,
        "image_count": 2
    },
    {
        "title": "Tech Talk: AI trong Mobile",
        "description": "Tham gia tech talk v·ªÅ ·ª©ng d·ª•ng AI trong ph√°t tri·ªÉn mobile app. Chia s·∫ª kinh nghi·ªám v√† th·∫£o lu·∫≠n v·ªÅ xu h∆∞·ªõng t∆∞∆°ng lai.",
        "type_id": 5,  # Conference
        "start_date": (datetime.now() + timedelta(days=6, hours=14)).isoformat(),
        "location": "Coworking space, 321 ƒê∆∞·ªùng GHI, Qu·∫≠n 7",
        "has_images": True,
        "image_count": 3
    }
]

def init_database():
    """Initialize database with sample data"""
    print("üöÄ Initializing database with sample events...")
    
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        conn.row_factory = sqlite3.Row
        
        # Clear existing data
        conn.execute("DELETE FROM images")
        conn.execute("DELETE FROM events")
        conn.execute("DELETE FROM event_types")
        
        # Reset auto-increment
        conn.execute("DELETE FROM sqlite_sequence WHERE name='events'")
        conn.execute("DELETE FROM sqlite_sequence WHERE name='images'")
        conn.execute("DELETE FROM sqlite_sequence WHERE name='event_types'")
        
        # Insert event types
        print("üìã Creating event types...")
        for event_type in EVENT_TYPES:
            conn.execute('''
                INSERT INTO event_types (id, name, description)
                VALUES (?, ?, ?)
            ''', (event_type["id"], event_type["name"], event_type["description"]))
        
        # Insert sample events
        print("üìù Creating sample events...")
        for i, event_data in enumerate(SAMPLE_EVENTS, 1):
            cursor = conn.execute('''
                INSERT INTO events (title, description, type_id, start_date, location, created_at)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                event_data["title"],
                event_data["description"],
                event_data["type_id"],
                event_data["start_date"],
                event_data["location"],
                datetime.now().isoformat()
            ))
            
            event_id = cursor.lastrowid
            
            # Add sample images if needed
            if event_data["has_images"]:
                print(f"üìÅ Adding {event_data['image_count']} images for event {i}")
                for img_idx in range(event_data["image_count"]):
                    # Create sample image record
                    filename = f"sample_event_{event_id}_img_{img_idx + 1}.jpg"
                    conn.execute('''
                        INSERT INTO images (event_id, original_name, filename, file_path, file_size, uploaded_at)
                        VALUES (?, ?, ?, ?, ?, ?)
                    ''', (
                        event_id,
                        f"event_image_{img_idx + 1}.jpg",
                        filename,
                        f"/uploads/{filename}",
                        random.randint(500000, 2000000),  # 500KB - 2MB
                        datetime.now().isoformat()
                    ))
        
        conn.commit()
        print("‚úÖ Sample data created successfully!")
        
        # Verify data
        cursor = conn.execute("SELECT COUNT(*) FROM events")
        events_count = cursor.fetchone()[0]
        cursor = conn.execute("SELECT COUNT(*) FROM images")
        images_count = cursor.fetchone()[0]
        cursor = conn.execute("SELECT COUNT(*) FROM event_types")
        types_count = cursor.fetchone()[0]
        
        print(f"üìä Database summary:")
        print(f"   - Events: {events_count}")
        print(f"   - Images: {images_count}")
        print(f"   - Event types: {types_count}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Error creating sample data: {str(e)}")
        return False

def create_sample_images():
    """Create sample image files for demo"""
    print("\nüñºÔ∏è Creating sample image files...")
    
    upload_dir = "uploads"
    os.makedirs(upload_dir, exist_ok=True)
    
    # Create some sample image files (empty files for demo)
    sample_images = [
        "sample_event_1_img_1.jpg",
        "sample_event_1_img_2.jpg", 
        "sample_event_3_img_1.jpg",
        "sample_event_3_img_2.jpg",
        "sample_event_3_img_3.jpg",
        "sample_event_4_img_1.jpg",
        "sample_event_6_img_1.jpg",
        "sample_event_6_img_2.jpg",
        "sample_event_6_img_3.jpg",
        "sample_event_6_img_4.jpg",
        "sample_event_7_img_1.jpg",
        "sample_event_7_img_2.jpg",
        "sample_event_7_img_3.jpg",
        "sample_event_7_img_4.jpg",
        "sample_event_7_img_5.jpg",
        "sample_event_9_img_1.jpg",
        "sample_event_9_img_2.jpg",
        "sample_event_10_img_1.jpg",
        "sample_event_10_img_2.jpg",
        "sample_event_10_img_3.jpg"
    ]
    
    for img_name in sample_images:
        img_path = os.path.join(upload_dir, img_name)
        if not os.path.exists(img_path):
            with open(img_path, 'w') as f:
                f.write(f"# Sample image file: {img_name}\n")
                f.write(f"# Created for demo purposes\n")
                f.write(f"# This is a placeholder file\n")
            print(f"‚úÖ Created: {img_name}")
        else:
            print(f"‚è≠Ô∏è Skipped: {img_name} (already exists)")

def show_sample_data():
    """Display sample data for verification"""
    print("\nüìã Sample Events Preview:")
    print("=" * 80)
    
    for i, event in enumerate(SAMPLE_EVENTS, 1):
        event_type = next(et for et in EVENT_TYPES if et["id"] == event["type_id"])
        start_date = datetime.fromisoformat(event["start_date"]).strftime("%d/%m/%Y %H:%M")
        
        print(f"{i:2d}. {event['title']}")
        print(f"    üìÖ {start_date} | üìç {event['location']}")
        print(f"    üè∑Ô∏è {event_type['name']} | üì∏ {event['image_count']} ·∫£nh")
        print(f"    üìù {event['description'][:80]}...")
        print()

def main():
    print("üéØ Sample Events Creator for Demo")
    print("=" * 50)
    
    # Show preview
    show_sample_data()
    
    # Create sample data
    if init_database():
        create_sample_images()
        print("\nüéâ Sample data creation completed!")
        print("\nüì± You can now run the mock server and test the app with this sample data.")
        print("   Run: python3 python_mock_server.py")
    else:
        print("\n‚ùå Failed to create sample data!")

if __name__ == "__main__":
    main()
