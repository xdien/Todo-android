#!/usr/bin/env python3
"""
Script to create demo events specifically for video demo
Creates events with memorable names and diverse scenarios for quick demo
"""

import sqlite3
import json
from datetime import datetime, timedelta
import os
import random

DATABASE_PATH = 'events.db'

# Demo event types with Vietnamese names
DEMO_EVENT_TYPES = [
    {"id": 1, "name": "Meeting", "description": "H·ªçp nh√≥m, h·ªçp d·ª± √°n"},
    {"id": 2, "name": "Work", "description": "C√¥ng vi·ªác, deadline"},
    {"id": 3, "name": "Personal", "description": "S·ª± ki·ªán c√° nh√¢n"},
    {"id": 4, "name": "Party", "description": "Ti·ªác t√πng, sinh nh·∫≠t"},
    {"id": 5, "name": "Conference", "description": "H·ªôi th·∫£o, workshop"}
]

# Demo events - designed for quick video demo
DEMO_EVENTS = [
    {
        "title": "Demo App Meeting",
        "description": "Cu·ªôc h·ªçp demo ·ª©ng d·ª•ng s·ª± ki·ªán c√° nh√¢n. Th·∫£o lu·∫≠n v·ªÅ t√≠nh nƒÉng m·ªõi v√† k·∫ø ho·∫°ch ph√°t tri·ªÉn.",
        "type_id": 1,  # Meeting
        "start_date": (datetime.now() + timedelta(days=1, hours=10)).isoformat(),
        "location": "Ph√≤ng h·ªçp Demo, T·∫ßng 2",
        "has_images": True,
        "image_count": 2,
        "demo_note": "S·ª± ki·ªán ƒë·∫ßu ti√™n ƒë·ªÉ demo - c√≥ ·∫£nh"
    },
    {
        "title": "Deadline Project",
        "description": "Ho√†n th√†nh d·ª± √°n demo app. Ki·ªÉm tra cu·ªëi c√πng v√† chu·∫©n b·ªã presentation.",
        "type_id": 2,  # Work
        "start_date": (datetime.now() + timedelta(days=2, hours=16)).isoformat(),
        "location": "VƒÉn ph√≤ng l√†m vi·ªác",
        "has_images": False,
        "image_count": 0,
        "demo_note": "S·ª± ki·ªán Work - kh√¥ng c√≥ ·∫£nh"
    },
    {
        "title": "Sinh nh·∫≠t Demo",
        "description": "Ti·ªác sinh nh·∫≠t demo v·ªõi b·∫°n b√®. T·ªï ch·ª©c t·∫°i nh√† v·ªõi b√°nh kem v√† qu√† t·∫∑ng.",
        "type_id": 4,  # Party
        "start_date": (datetime.now() + timedelta(days=3, hours=19)).isoformat(),
        "location": "Nh√† ri√™ng Demo",
        "has_images": True,
        "image_count": 3,
        "demo_note": "S·ª± ki·ªán Party - nhi·ªÅu ·∫£nh"
    },
    {
        "title": "Workshop Demo",
        "description": "Workshop v·ªÅ ph√°t tri·ªÉn ·ª©ng d·ª•ng mobile. H·ªçc v·ªÅ React Native v√† Flutter.",
        "type_id": 5,  # Conference
        "start_date": (datetime.now() + timedelta(days=4, hours=14)).isoformat(),
        "location": "H·ªôi tr∆∞·ªùng Workshop",
        "has_images": True,
        "image_count": 1,
        "demo_note": "S·ª± ki·ªán Conference - 1 ·∫£nh"
    },
    {
        "title": "Ch·∫°y b·ªô Demo",
        "description": "Ch·∫°y b·ªô bu·ªïi s√°ng t·∫°i c√¥ng vi√™n. T·∫≠p luy·ªán s·ª©c kh·ªèe v√† th∆∞ gi√£n.",
        "type_id": 3,  # Personal
        "start_date": (datetime.now() + timedelta(days=1, hours=6)).isoformat(),
        "location": "C√¥ng vi√™n Demo",
        "has_images": True,
        "image_count": 2,
        "demo_note": "S·ª± ki·ªán Personal - c√≥ ·∫£nh"
    },
    {
        "title": "Review Code Demo",
        "description": "Review code cho d·ª± √°n demo app. Ki·ªÉm tra ch·∫•t l∆∞·ª£ng v√† performance.",
        "type_id": 1,  # Meeting
        "start_date": (datetime.now() + timedelta(days=1, hours=15)).isoformat(),
        "location": "Ph√≤ng h·ªçp Review",
        "has_images": True,
        "image_count": 4,
        "demo_note": "S·ª± ki·ªán Meeting - nhi·ªÅu ·∫£nh"
    },
    {
        "title": "Ti·ªác Demo",
        "description": "Ti·ªác demo v·ªõi team. T·ªïng k·∫øt d·ª± √°n v√† ƒÉn m·ª´ng th√†nh c√¥ng.",
        "type_id": 4,  # Party
        "start_date": (datetime.now() + timedelta(days=5, hours=18)).isoformat(),
        "location": "Nh√† h√†ng Demo",
        "has_images": True,
        "image_count": 5,
        "demo_note": "S·ª± ki·ªán Party - t·ªëi ƒëa 5 ·∫£nh"
    },
    {
        "title": "G·∫∑p kh√°ch h√†ng Demo",
        "description": "G·∫∑p g·ª° kh√°ch h√†ng ƒë·ªÉ demo s·∫£n ph·∫©m. Gi·ªõi thi·ªáu t√≠nh nƒÉng m·ªõi.",
        "type_id": 2,  # Work
        "start_date": (datetime.now() + timedelta(days=3, hours=11)).isoformat(),
        "location": "Caf√© Demo",
        "has_images": False,
        "image_count": 0,
        "demo_note": "S·ª± ki·ªán Work - kh√¥ng ·∫£nh"
    }
]

def create_demo_database():
    """Create demo database with sample events"""
    print("üé¨ Creating Demo Database for Video Demo")
    print("=" * 50)
    
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        conn.row_factory = sqlite3.Row
        
        # Clear existing data
        print("üßπ Clearing existing data...")
        conn.execute("DELETE FROM images")
        conn.execute("DELETE FROM events")
        conn.execute("DELETE FROM event_types")
        
        # Reset auto-increment
        conn.execute("DELETE FROM sqlite_sequence WHERE name='events'")
        conn.execute("DELETE FROM sqlite_sequence WHERE name='images'")
        conn.execute("DELETE FROM sqlite_sequence WHERE name='event_types'")
        
        # Insert event types
        print("üìã Creating event types...")
        for event_type in DEMO_EVENT_TYPES:
            conn.execute('''
                INSERT INTO event_types (id, name, description)
                VALUES (?, ?, ?)
            ''', (event_type["id"], event_type["name"], event_type["description"]))
        
        # Insert demo events
        print("üìù Creating demo events...")
        for i, event_data in enumerate(DEMO_EVENTS, 1):
            cursor = conn.execute('''
                INSERT INTO events (title, description, type_id, start_date, location, created_at)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                event_data["title"],
                event_data["description"],
                event_data["type_id"],
                event_data["start_date"],
                event_data["location"],
                datetime.now().isoformat()
            ))
            
            event_id = cursor.lastrowid
            
            # Add demo images if needed
            if event_data["has_images"]:
                print(f"üìÅ Adding {event_data['image_count']} images for event {i}: {event_data['title']}")
                for img_idx in range(event_data["image_count"]):
                    # Create demo image record
                    filename = f"demo_event_{event_id}_img_{img_idx + 1}.jpg"
                    conn.execute('''
                        INSERT INTO images (event_id, original_name, filename, file_path, file_size, uploaded_at)
                        VALUES (?, ?, ?, ?, ?, ?)
                    ''', (
                        event_id,
                        f"demo_image_{img_idx + 1}.jpg",
                        filename,
                        f"/uploads/{filename}",
                        random.randint(800000, 1500000),  # 800KB - 1.5MB
                        datetime.now().isoformat()
                    ))
        
        conn.commit()
        print("‚úÖ Demo database created successfully!")
        
        # Show summary
        cursor = conn.execute("SELECT COUNT(*) FROM events")
        events_count = cursor.fetchone()[0]
        cursor = conn.execute("SELECT COUNT(*) FROM images")
        images_count = cursor.fetchone()[0]
        cursor = conn.execute("SELECT COUNT(*) FROM event_types")
        types_count = cursor.fetchone()[0]
        
        print(f"\nüìä Demo Database Summary:")
        print(f"   - Events: {events_count}")
        print(f"   - Images: {images_count}")
        print(f"   - Event types: {types_count}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Error creating demo database: {str(e)}")
        return False

def create_demo_images():
    """Create demo image files"""
    print("\nüñºÔ∏è Creating demo image files...")
    
    upload_dir = "uploads"
    os.makedirs(upload_dir, exist_ok=True)
    
    # Create demo image files
    demo_images = [
        "demo_event_1_img_1.jpg",
        "demo_event_1_img_2.jpg",
        "demo_event_3_img_1.jpg", 
        "demo_event_3_img_2.jpg",
        "demo_event_3_img_3.jpg",
        "demo_event_4_img_1.jpg",
        "demo_event_5_img_1.jpg",
        "demo_event_5_img_2.jpg",
        "demo_event_6_img_1.jpg",
        "demo_event_6_img_2.jpg",
        "demo_event_6_img_3.jpg",
        "demo_event_6_img_4.jpg",
        "demo_event_7_img_1.jpg",
        "demo_event_7_img_2.jpg",
        "demo_event_7_img_3.jpg",
        "demo_event_7_img_4.jpg",
        "demo_event_7_img_5.jpg"
    ]
    
    for img_name in demo_images:
        img_path = os.path.join(upload_dir, img_name)
        if not os.path.exists(img_path):
            with open(img_path, 'w') as f:
                f.write(f"# Demo image file: {img_name}\n")
                f.write(f"# Created for video demo purposes\n")
                f.write(f"# This is a placeholder file for demo\n")
                f.write(f"# File size: {random.randint(800000, 1500000)} bytes\n")
            print(f"‚úÖ Created: {img_name}")
        else:
            print(f"‚è≠Ô∏è Skipped: {img_name} (already exists)")

def show_demo_events():
    """Display demo events for verification"""
    print("\nüé¨ Demo Events for Video Demo:")
    print("=" * 80)
    
    for i, event in enumerate(DEMO_EVENTS, 1):
        event_type = next(et for et in DEMO_EVENT_TYPES if et["id"] == event["type_id"])
        start_date = datetime.fromisoformat(event["start_date"]).strftime("%d/%m %H:%M")
        
        print(f"{i}. {event['title']}")
        print(f"   üìÖ {start_date} | üìç {event['location']}")
        print(f"   üè∑Ô∏è {event_type['name']} | üì∏ {event['image_count']} ·∫£nh")
        print(f"   üí° {event['demo_note']}")
        print()

def create_demo_script():
    """Create demo script for video recording"""
    print("\nüìù Demo Script for Video Recording:")
    print("=" * 80)
    
    script = """
üé¨ VIDEO DEMO SCRIPT - APP S·ª∞ KI·ªÜN C√Å NH√ÇN
==========================================

üì± PH·∫¶N 1: GI·ªöI THI·ªÜU UI (30 gi√¢y)
- M·ªü app, hi·ªÉn th·ªã danh s√°ch s·ª± ki·ªán
- Gi·ªõi thi·ªáu: "ƒê√¢y l√† app qu·∫£n l√Ω s·ª± ki·ªán c√° nh√¢n v·ªõi 8 s·ª± ki·ªán m·∫´u"
- Ch·ªâ ra: Chip filter (Meeting, Work, Personal, Party, Conference)
- Ch·ªâ ra: Search bar v√† n√∫t Settings

üîç PH·∫¶N 2: T√åM KI·∫æM & L·ªåC (30 gi√¢y)
- Nh·∫•n Search ‚Üí Nh·∫≠p "Demo" ‚Üí Hi·ªÉn th·ªã k·∫øt qu·∫£
- Clear search ‚Üí Ch·ªçn chip "Meeting" ‚Üí Ch·ªâ hi·ªÉn th·ªã 3 s·ª± ki·ªán Meeting
- B·ªè ch·ªçn chip ‚Üí Hi·ªÉn th·ªã l·∫°i t·∫•t c·∫£

‚ûï PH·∫¶N 3: T·∫†O S·ª∞ KI·ªÜN M·ªöI (45 gi√¢y)
- Nh·∫•n n√∫t "+" ‚Üí M√†n h√¨nh t·∫°o m·ªõi
- Nh·∫≠p: "Demo Video Event"
- Nh·∫≠p m√¥ t·∫£: "S·ª± ki·ªán t·∫°o trong video demo"
- Ch·ªçn th·ªùi gian: Ng√†y mai 15:00
- Nh·∫≠p ƒë·ªãa ƒëi·ªÉm: "Studio Demo"
- Ch·ªçn lo·∫°i: "Personal"
- Th√™m 2 ·∫£nh t·ª´ gallery
- Nh·∫•n "L∆∞u" ‚Üí Th√†nh c√¥ng

üëÅÔ∏è PH·∫¶N 4: XEM CHI TI·∫æT & CH·ªàNH S·ª¨A (45 gi√¢y)
- Nh·∫•n v√†o "Demo App Meeting" ‚Üí M√†n h√¨nh chi ti·∫øt
- Xem th√¥ng tin ƒë·∫ßy ƒë·ªß v√† ·∫£nh
- Nh·∫•n "Ch·ªânh s·ª≠a" ‚Üí Thay ƒë·ªïi ti√™u ƒë·ªÅ th√†nh "Demo App Meeting Updated"
- L∆∞u ‚Üí Quay v·ªÅ chi ti·∫øt ‚Üí Th·∫•y thay ƒë·ªïi

üì§ PH·∫¶N 5: CHIA S·∫∫ & X√ìA (30 gi√¢y)
- Nh·∫•n icon "Chia s·∫ª" ‚Üí Hi·ªÉn th·ªã native share
- Quay l·∫°i ‚Üí Nh·∫•n "X√≥a" ‚Üí Dialog x√°c nh·∫≠n
- Nh·∫•n "X√≥a" ‚Üí Quay v·ªÅ danh s√°ch ‚Üí S·ª± ki·ªán ƒë√£ x√≥a

üîÑ PH·∫¶N 6: REFRESH & K·∫æT LU·∫¨N (30 gi√¢y)
- Pull-to-refresh ‚Üí Loading indicator
- "App h·ªó tr·ª£ offline cache v√† sync v·ªõi server"
- "C√≥ th·ªÉ t√¨m ki·∫øm, l·ªçc, t·∫°o, s·ª≠a, x√≥a s·ª± ki·ªán"
- "Upload ·∫£nh v√† validation form ƒë·∫ßy ƒë·ªß"
"""
    
    print(script)

def main():
    print("üé¨ Demo Events Creator for Video Demo")
    print("=" * 50)
    
    # Show demo events
    show_demo_events()
    
    # Create demo database
    if create_demo_database():
        create_demo_images()
        print("\nüéâ Demo database creation completed!")
        
        # Show demo script
        create_demo_script()
        
        print("\nüì± Next steps:")
        print("   1. Run: python3 python_mock_server.py")
        print("   2. Open app and test with demo data")
        print("   3. Follow the demo script for video recording")
    else:
        print("\n‚ùå Failed to create demo database!")

if __name__ == "__main__":
    main()
